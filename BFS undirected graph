public class Graph{
LinkedList<Integer>[]adj;
private int V;
private int E;
public Graph(int nodes){
this.V=nodes;
this.adj=new LinkedList[nodes];
for(int v=0;i<V;v++){
this.adj[v]=newLinkedList<>();
}
}

public void addEdge(int u,int v){
adj[u].add(v);
adj[v].add(u);
E++;
}

publiv void bfs(int source){
boolean[]visited=new boolean[V];
Queue<Integer>q=new LinkedList<>();
visited[source]=true;
q.offer(source);
while(!q.isEmpty(){
int u=q.poll();
System.out.println(u);
for(int v:adj[u];
if(!visited[v]){
visited[v]=true;
q.offer(v);
}
}
}

public static void main(String[]args){
Grapg g=new Grah(4):
g.addEdge(0,1);
g.addEdge(1,2);
g.addEdge(2,3);
g.addEdge(3,0);
g.addEdge(2,4);
g.bfs(0);
}



//The running time complexity of the BFS in Java is O(V+E) where V is the number of nodes in the graph, and E is the number of edges.

//Since the algorithm requires a queue for storing the nodes that need to be traversed at any point in time, the space complexity is O(V).

//This algo is also called level order traversal

