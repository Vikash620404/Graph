public class Graph{
LinkedList<Integer>[]adj;
private int V;
private int E;
public Graph(int nodes){
this.V=nodes;
this.adj=new LinkedList[nodes];
for(int v=0;i<V;v++){
this.adj[v]=newLinkedList<>();
}
}

public void addEdge(int u,int v){
adj[u].add(v);
adj[v].add(u);
E++;
}

publiv void dfs(int source){
boolean[]visited=new boolean[V];
Stack<Integer>stack=new Stack<>();
stack.push(source);
while(!stack.isEmpty()){
int u=stack.pop();
if(!visited[u]){
visited[u]=true;
System.out.println(u);
for(int v:adj[u]){
if(!visited[v]){}
stack.push(v);
}
}
}
}

public static void main(String[]args){
Grapg g=new Grah(4):
g.addEdge(0,1);
g.addEdge(1,2);
g.addEdge(2,3);
g.addEdge(3,0);
g.addEdge(2,4);
g.dfs(0);
}

//The running time complexity of the DFS algorithm in java is O(V+E) where V is the number of nodes in the graph, and E is the number of edges.
//space complexity is O(V).









***)RECURSIVE APPROACH OF DFS
public  void dfs(){
boolean[]visited=new boolean[V];
for(int v=0;v<V;v++){
if(!visited[v]){
dfs(v,visited);
}
}
}
public void dfs(int v,boolen[]visited){
visited[v]=true;
System.out.println(v);
for(int w:adj[v]){
if(!visited[w]){
dfs(w,visited);
}
}

}
